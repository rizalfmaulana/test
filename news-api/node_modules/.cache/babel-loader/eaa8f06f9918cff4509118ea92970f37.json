{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\n// export const NewsContext = createContext<INews | null>(null);\n// export const NewsContextProvider: React.FunctionComponent = ({ children }) => {\n//   const [news, setNews] = useState<INews>();\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const data = await axios.get(\"https://newsapi.org/v2/top-headlines?country=id&apiKey=6ea25a8dca434dd38d9adfef34ecfa02\");\n//       setNews(data.data);\n//     };\n//     fetchData();\n//   }, []);\n//   return <NewsContext.Provider value={{ news, setNews }}>{children}</NewsContext.Provider>;\n// };\n// export const ThemeProvider: FC = ({ children }) => {\n//   const [dark, setDark] = useState(defaultState.dark);\n//   const toggleDark = () => {\n//     setDark(!dark);\n//   };\n//   return (\n//     <ThemeContext.Provider\n//       value={{\n//         dark,\n//         toggleDark,\n//       }}\n//     >\n//       {children}\n//     </ThemeContext.Provider>\n//   );\n// };\n// import * as React from \"react\";\n// export interface ITodo {\n//   id: number;\n//   title: string;\n//   description: string;\n//   status: boolean;\n// }\n// export type TodoContextType = {\n//   todos: ITodo[];\n//   saveTodo: (todo: ITodo) => void;\n//   updateTodo: (id: number) => void;\n// };\n// export const TodoContext = React.createContext<TodoContextType | null>(null);\n// const TodoProvider: React.FC<React.ReactNode> = ({ children }) => {\n//   const [todos, setTodos] = React.useState<ITodo[]>([]);\n//   const saveTodo = (todo: ITodo) => {\n//     const newTodo: ITodo = {\n//       id: Math.random(), // not really unique - but fine for this example\n//       title: todo.title,\n//       description: todo.description,\n//       status: false,\n//     };\n//     setTodos([...todos, newTodo]);\n//   };\n//   const updateTodo = (id: number) => {\n//     todos.filter((todo: ITodo) => {\n//       if (todo.id === id) {\n//         todo.status = true;\n//         setTodos([...todos]);\n//       }\n//     });\n//   };\n//   return <TodoContext.Provider value={{ todos, saveTodo, updateTodo }}>{children}</TodoContext.Provider>;\n// };\n// export default TodoProvider;\nconst useAxios = url => {\n  _s();\n\n  const [news, setNews] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(url);\n      setIsLoading(false);\n      setNews(response.data);\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return {\n    isLoading,\n    isError,\n    news\n  };\n};\n\n_s(useAxios, \"Ie9ZSlXSkI+cY//QbOcejv3Dzlg=\");\n\nexport default useAxios;","map":{"version":3,"sources":["/Users/rizalmaulana/Documents/rizal-eigen-test/news-api/src/context/newsContext.tsx"],"names":["axios","useEffect","useState","useAxios","url","news","setNews","isLoading","setIsLoading","isError","setIsError","fetchData","response","get","data","error","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAiB;AAAA;;AAChC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,EAAhC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;;AACA,QAAMS,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUT,GAAV,CAAvB;AACAI,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,OAAO,CAACM,QAAQ,CAACE,IAAV,CAAP;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc;AACdP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAVD;;AAWAd,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO;AAAEJ,IAAAA,SAAF;AAAaE,IAAAA,OAAb;AAAsBJ,IAAAA;AAAtB,GAAP;AACD,CAnBD;;GAAMF,Q;;AAoBN,eAAeA,QAAf","sourcesContent":["import axios from \"axios\";\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { INews } from \"../types/news\";\n\n// export const NewsContext = createContext<INews | null>(null);\n\n// export const NewsContextProvider: React.FunctionComponent = ({ children }) => {\n//   const [news, setNews] = useState<INews>();\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const data = await axios.get(\"https://newsapi.org/v2/top-headlines?country=id&apiKey=6ea25a8dca434dd38d9adfef34ecfa02\");\n//       setNews(data.data);\n//     };\n//     fetchData();\n//   }, []);\n\n//   return <NewsContext.Provider value={{ news, setNews }}>{children}</NewsContext.Provider>;\n// };\n\n// export const ThemeProvider: FC = ({ children }) => {\n//   const [dark, setDark] = useState(defaultState.dark);\n\n//   const toggleDark = () => {\n//     setDark(!dark);\n//   };\n\n//   return (\n//     <ThemeContext.Provider\n//       value={{\n//         dark,\n//         toggleDark,\n//       }}\n//     >\n//       {children}\n//     </ThemeContext.Provider>\n//   );\n// };\n\n// import * as React from \"react\";\n\n// export interface ITodo {\n//   id: number;\n//   title: string;\n//   description: string;\n//   status: boolean;\n// }\n// export type TodoContextType = {\n//   todos: ITodo[];\n//   saveTodo: (todo: ITodo) => void;\n//   updateTodo: (id: number) => void;\n// };\n// export const TodoContext = React.createContext<TodoContextType | null>(null);\n\n// const TodoProvider: React.FC<React.ReactNode> = ({ children }) => {\n//   const [todos, setTodos] = React.useState<ITodo[]>([]);\n//   const saveTodo = (todo: ITodo) => {\n//     const newTodo: ITodo = {\n//       id: Math.random(), // not really unique - but fine for this example\n//       title: todo.title,\n//       description: todo.description,\n//       status: false,\n//     };\n//     setTodos([...todos, newTodo]);\n//   };\n//   const updateTodo = (id: number) => {\n//     todos.filter((todo: ITodo) => {\n//       if (todo.id === id) {\n//         todo.status = true;\n//         setTodos([...todos]);\n//       }\n//     });\n//   };\n//   return <TodoContext.Provider value={{ todos, saveTodo, updateTodo }}>{children}</TodoContext.Provider>;\n// };\n\n// export default TodoProvider;\n\nconst useAxios = (url: string) => {\n  const [news, setNews] = useState<INews>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(url);\n      setIsLoading(false);\n      setNews(response.data);\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return { isLoading, isError, news };\n};\nexport default useAxios;\n"]},"metadata":{},"sourceType":"module"}